#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<windows.h> // Used for Sleep(ms) and Beep

// Function Prototypes
void Black(), Red(), Green(), Yellow(), Blue(), Purple(), Cyan(), White(), Reset();
void AlarmClock();
void calendar();
int getFirstDayOfTheYear(int year);
int february(int year);
int isSpecialDate(int day, int month);

// Color Functions
void Black() { printf("\033[0;30m"); }
void Red() { printf("\033[0;31m"); }
void Green() { printf("\033[0;32m"); }
void Yellow() { printf("\033[0;33m"); }
void Blue() { printf("\033[0;34m"); }
void Purple() { printf("\033[0;35m"); }
void Cyan() { printf("\033[0;36m"); }
void White() { printf("\033[0;37m"); }
void Reset() { printf("\033[0m"); }

// Main Function
int main() {
    int c;
    while (1) {
        Green();
        printf("\nOptions:\n");
        Reset();
        Blue();
        printf("1. Calendar\n");
        printf("2. Alarm Clock\n");
        printf("3. Exit\n");
        Reset();
        Yellow();
        printf("Enter Choice No: ");
        scanf("%d", &c);
        Reset();

        if (c == 1) {
            calendar();
        } else if (c == 2) {
            AlarmClock();
        } else if (c == 3) {
            break;
        } else {
            Red();
            printf("\nPlease Enter Correct Choice!!\n\n");
            Reset();
        }
    }
    printf("\n");
    Red();
    printf("              Program is Finished        \n");
    printf("                  Thank You!!            \n");
    Reset();
    return 0;
}

// Alarm Clock
void AlarmClock() {
    int hour, min, sec; // System time
    int h, m, s;        // User input

    // Get current time
    time_t now = time(NULL);
    struct tm* t = localtime(&now);
    hour = t->tm_hour;
    min = t->tm_min;
    sec = t->tm_sec;

    Cyan();
    printf("%70s\n", "Enter Alarm Time (24 Hour Format)");
    Reset();
    Purple();
    printf("HOUR : ");
    scanf("%d", &h);
    printf("MINUTE : ");
    scanf("%d", &m);
    printf("SECOND : ");
    scanf("%d", &s);
    Reset();

    if (h > 24 || m > 60 || s > 60) {
        Red();
        printf("\t\tInvalid Time\n");
        printf("\t\tTry Again!!\n\n");
        Reset();
        return;
    }

    while (1) {
        system("cls");
        printf("Alarm Time   = %02d:%02d:%02d\n", h, m, s);
        printf("Current Time = %02d:%02d:%02d\n", hour, min, sec + 1);
        Sleep(1000);
        sec++;
        if (sec == 60) { sec = 0; min++; }
        if (min == 60) { min = 0; hour++; }
        if (hour == 24) { hour = 0; }

        if (hour == h && min == m && sec == s) {
            Green();
            printf("\nHurry Up! You have to prepare.\n");
            Reset();

            // 10 Beep sound alarm
            for (int beep = 0; beep < 10; beep++) {
                Beep(750, 300);
            }
            break;
        }
    }
}

// Calendar Function
void calendar() {
    char* months[] = {
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    };
    int daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    int year;

    printf("\nEnter Year: ");
    scanf("%d", &year);

    if (year < 1583) {
        Red();
        printf("Please Enter a Year Above 1582\n");
        Reset();
        return;
    }

    daysInMonth[1] = february(year);
    int weekDay = getFirstDayOfTheYear(year);

    printf("\n\n%20s %d\n", "Calendar for Year", year);
    for (int i = 0; i < 12; i++) {
        printf("\n%20s\n", months[i]);
        printf("Sun Mon Tue Wed Thu Fri Sat\n");

        // Print initial spaces
        for (int j = 0; j < weekDay; j++) printf("    ");

        // Print days of the month
        for (int day = 1; day <= daysInMonth[i]; day++) {
            if (isSpecialDate(day, i + 1)) {
                Red(); // Special dates
            } else if (weekDay == 4 || weekDay == 5) {
                Blue(); // Thursdays and Fridays
            } else {
                Reset(); // Other dates
            }

            printf("%3d ", day);
            Reset();
            weekDay++;
            if (weekDay > 6) {
                weekDay = 0;
                printf("\n");
            }
        }
        printf("\n");

        // Update the starting weekday for the next month
        weekDay %= 7;
    }
}

// Helper Functions
int getFirstDayOfTheYear(int year) {
    return (year * 365 + (year - 1) / 4 - (year - 1) / 100 + (year - 1) / 400) % 7;
}

int february(int year) {
    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) ? 29 : 28;
}

int isSpecialDate(int day, int month) {
    // List of special dates
    int specialDates[][2] = {
        {14, 2}, {21, 2}, {26, 2}, {17, 3}, {26, 3}, {31, 3}, {6, 4}, {7, 4},
        {8, 4}, {9, 4}, {10, 4}, {13, 4}, {14, 4}, {15, 4}, {1, 5}, {22, 5},
        {12, 6}, {15, 6}, {16, 6}, {17, 6}, {18, 6}, {19, 6}, {22, 6}, {23, 6},
        {24, 6}, {25, 6}, {26, 6}, {17, 7}, {26, 8}, {4, 9}, {16, 9}, {12, 10},
        {13, 10}, {14, 10}, {15, 10}, {16, 10}, {14, 12}, {16, 12}, {24, 12},
        {25, 12}, {28, 12}, {29, 12}, {30, 12}, {31, 12}
    };

    int n = sizeof(specialDates) / sizeof(specialDates[0]);
    for (int i = 0; i < n; i++) {
        if (specialDates[i][0] == day && specialDates[i][1] == month) {
            return 1;
        }
    }
    return 0;
}
